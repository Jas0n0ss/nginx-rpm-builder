name: Build Nginx Variants RPM (RHEL9)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      target:
        description: 'Select build target'
        required: true
        type: choice
        options:
          - nginx-1.25.0
          - nginx-latest
          - tengine-latest
          - openresty-latest

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: quay.io/centos/centos:stream9

    env:
      BUILD_USER: builder
      BUILD_HOME: /home/builder
      RPMBUILD: /home/builder/rpmbuild

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Builder User
        run: |
          useradd -m -d /home/builder builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

      - name: Copy Project Files
        run: |
          cp -r $GITHUB_WORKSPACE/* /home/builder/
          chown -R builder:builder /home/builder/

      - name: Copy Plugins to SOURCES
        run: |
          cd /home/builder
          mkdir -p $RPMBUILD/SOURCES/plugins
          cp -r $GITHUB_WORKSPACE/rpmbuild/SOURCES/plugins/* $RPMBUILD/SOURCES/plugins/
        # 注意：这里不再使用 BUILD_TARGET，只复制模块

      - name: Setup Build Environment
        run: |
          cd /home/builder
          ./build/scripts/setup_env.sh
        # setup_env.sh 不使用 BUILD_TARGET，只安装依赖

      - name: Parse Build Target
        run: |
          case "${{ github.event_name }}" in
            push)
              echo "BUILD_TARGET=nginx-latest" >> $GITHUB_ENV
              ;;
            workflow_dispatch)
              case "${{ inputs.target }}" in
                nginx-1.25.0)
                  echo "BUILD_TARGET=nginx-1.25.0" >> $GITHUB_ENV
                  ;;
                nginx-latest)
                  echo "BUILD_TARGET=nginx-latest" >> $GITHUB_ENV
                  ;;
                tengine-latest)
                  echo "BUILD_TARGET=tengine-latest" >> $GITHUB_ENV
                  ;;
                openresty-latest)
                  echo "BUILD_TARGET=openresty-latest" >> $GITHUB_ENV
                  ;;
              esac
              ;;
          esac

      - name: Build RPM
        run: |
          cd /home/builder
          ./build/scripts/build.sh
        env:
          BUILD_TARGET: ${{ env.BUILD_TARGET }}
        # 只在 build.sh 中使用 BUILD_TARGET

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rpms-${{ env.BUILD_TARGET }}
          path: /home/builder/rpmbuild/RPMS/x86_64/*.rpm
          if-no-files-found: warn
        # ✅ 使用 v4，避免 2025 年被禁用

      - name: Extract Version from SPEC
        if: github.event_name == 'workflow_dispatch'
        run: |
          SPEC_FILE=$(find /home/builder/rpmbuild/SPECS -name "*.spec" | head -1)
          if [[ -f "$SPEC_FILE" ]]; then
            VERSION=$(grep "^Version:" "$SPEC_FILE" | awk '{print $2}')
            echo "RPM_VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "❌ SPEC file not found"
            exit 1
          fi

      - name: Create GitHub Release (Manual Only)
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_TARGET }}-v${{ env.RPM_VERSION }}
          name: Release ${{ env.BUILD_TARGET }} ${{ env.RPM_VERSION }}
          files: /home/builder/rpmbuild/RPMS/x86_64/*.rpm
          generate_release_notes: true
